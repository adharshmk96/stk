// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	migrator "github.com/adharshmk96/stk/pkg/migrator"
	mock "github.com/stretchr/testify/mock"
)

// FileRepo is an autogenerated mock type for the FileRepo type
type FileRepo struct {
	mock.Mock
}

// CreateMigrationFile provides a mock function with given fields: migration
func (_m *FileRepo) CreateMigrationFile(migration *migrator.Migration) error {
	ret := _m.Called(migration)

	var r0 error
	if rf, ok := ret.Get(0).(func(*migrator.Migration) error); ok {
		r0 = rf(migration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMigrationFile provides a mock function with given fields: migration
func (_m *FileRepo) DeleteMigrationFile(migration *migrator.Migration) error {
	ret := _m.Called(migration)

	var r0 error
	if rf, ok := ret.Get(0).(func(*migrator.Migration) error); ok {
		r0 = rf(migration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMigrationFilePathsByType provides a mock function with given fields: migrationType
func (_m *FileRepo) GetMigrationFilePathsByType(migrationType migrator.MigrationType) ([]string, error) {
	ret := _m.Called(migrationType)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(migrator.MigrationType) ([]string, error)); ok {
		return rf(migrationType)
	}
	if rf, ok := ret.Get(0).(func(migrator.MigrationType) []string); ok {
		r0 = rf(migrationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(migrator.MigrationType) error); ok {
		r1 = rf(migrationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadMigrationQuery provides a mock function with given fields: migration
func (_m *FileRepo) LoadMigrationQuery(migration *migrator.Migration) error {
	ret := _m.Called(migration)

	var r0 error
	if rf, ok := ret.Get(0).(func(*migrator.Migration) error); ok {
		r0 = rf(migration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadMigrationsFromFile provides a mock function with given fields: migrationType
func (_m *FileRepo) LoadMigrationsFromFile(migrationType migrator.MigrationType) ([]*migrator.Migration, error) {
	ret := _m.Called(migrationType)

	var r0 []*migrator.Migration
	var r1 error
	if rf, ok := ret.Get(0).(func(migrator.MigrationType) ([]*migrator.Migration, error)); ok {
		return rf(migrationType)
	}
	if rf, ok := ret.Get(0).(func(migrator.MigrationType) []*migrator.Migration); ok {
		r0 = rf(migrationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*migrator.Migration)
		}
	}

	if rf, ok := ret.Get(1).(func(migrator.MigrationType) error); ok {
		r1 = rf(migrationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenDirectory provides a mock function with given fields:
func (_m *FileRepo) OpenDirectory() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteMigrationToFile provides a mock function with given fields: migration
func (_m *FileRepo) WriteMigrationToFile(migration *migrator.Migration) error {
	ret := _m.Called(migration)

	var r0 error
	if rf, ok := ret.Get(0).(func(*migrator.Migration) error); ok {
		r0 = rf(migration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFileRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileRepo creates a new instance of FileRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileRepo(t mockConstructorTestingTNewFileRepo) *FileRepo {
	mock := &FileRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
