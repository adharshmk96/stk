// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	migrator "github.com/adharshmk96/stk/pkg/migrator"
	mock "github.com/stretchr/testify/mock"
)

// DatabaseRepo is an autogenerated mock type for the DatabaseRepo type
type DatabaseRepo struct {
	mock.Mock
}

// ApplyMigration provides a mock function with given fields: migration
func (_m *DatabaseRepo) ApplyMigration(migration *migrator.Migration) error {
	ret := _m.Called(migration)

	var r0 error
	if rf, ok := ret.Get(0).(func(*migrator.Migration) error); ok {
		r0 = rf(migration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMigrationTableIfNotExists provides a mock function with given fields:
func (_m *DatabaseRepo) CreateMigrationTableIfNotExists() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMigrationTable provides a mock function with given fields:
func (_m *DatabaseRepo) DeleteMigrationTable() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastAppliedMigration provides a mock function with given fields:
func (_m *DatabaseRepo) GetLastAppliedMigration() (*migrator.Migration, error) {
	ret := _m.Called()

	var r0 *migrator.Migration
	var r1 error
	if rf, ok := ret.Get(0).(func() (*migrator.Migration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *migrator.Migration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*migrator.Migration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadLastAppliedMigration provides a mock function with given fields:
func (_m *DatabaseRepo) LoadLastAppliedMigration() (*migrator.Migration, error) {
	ret := _m.Called()

	var r0 *migrator.Migration
	var r1 error
	if rf, ok := ret.Get(0).(func() (*migrator.Migration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *migrator.Migration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*migrator.Migration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadMigrations provides a mock function with given fields:
func (_m *DatabaseRepo) LoadMigrations() ([]*migrator.Migration, error) {
	ret := _m.Called()

	var r0 []*migrator.Migration
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*migrator.Migration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*migrator.Migration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*migrator.Migration)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatabaseRepo creates a new instance of DatabaseRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseRepo {
	mock := &DatabaseRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
