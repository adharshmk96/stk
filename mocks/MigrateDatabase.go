// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	sqlmigrator "github.com/adharshmk96/stk/pkg/sqlMigrator"
	mock "github.com/stretchr/testify/mock"
)

// MigrateDatabase is an autogenerated mock type for the MigrateDatabase type
type MigrateDatabase struct {
	mock.Mock
}

// Exec provides a mock function with given fields: query
func (_m *MigrateDatabase) Exec(query string) error {
	ret := _m.Called(query)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadHistory provides a mock function with given fields:
func (_m *MigrateDatabase) LoadHistory() ([]*sqlmigrator.MigrationEntry, error) {
	ret := _m.Called()

	var r0 []*sqlmigrator.MigrationEntry
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*sqlmigrator.MigrationEntry, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*sqlmigrator.MigrationEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sqlmigrator.MigrationEntry)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMigrateDatabase creates a new instance of MigrateDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMigrateDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MigrateDatabase {
	mock := &MigrateDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
