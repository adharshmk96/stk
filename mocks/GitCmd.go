// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GitCmd is an autogenerated mock type for the GitCmd type
type GitCmd struct {
	mock.Mock
}

// AddRemote provides a mock function with given fields: remoteName, remoteUrl
func (_m *GitCmd) AddRemote(remoteName string, remoteUrl string) error {
	ret := _m.Called(remoteName, remoteUrl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(remoteName, remoteUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRemoteOrigin provides a mock function with given fields:
func (_m *GitCmd) GetRemoteOrigin() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *GitCmd) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsRepo provides a mock function with given fields:
func (_m *GitCmd) IsRepo() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Revparse provides a mock function with given fields: ref
func (_m *GitCmd) Revparse(ref string) (string, error) {
	ret := _m.Called(ref)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(ref)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(ref)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunCmd provides a mock function with given fields: args
func (_m *GitCmd) RunCmd(args ...string) (string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (string, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGitCmd creates a new instance of GitCmd. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitCmd(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitCmd {
	mock := &GitCmd{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
