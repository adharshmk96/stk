// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	gsk "github.com/adharshmk96/stk/gsk"

	httprouter "github.com/julienschmidt/httprouter"

	mock "github.com/stretchr/testify/mock"
)

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

// HandlerFunc provides a mock function with given fields: method, path, handler
func (_m *Router) HandlerFunc(method string, path string, handler http.HandlerFunc) {
	_m.Called(method, path, handler)
}

// ParamsFromContext provides a mock function with given fields: _a0
func (_m *Router) ParamsFromContext(_a0 context.Context) gsk.Params {
	ret := _m.Called(_a0)

	var r0 gsk.Params
	if rf, ok := ret.Get(0).(func(context.Context) gsk.Params); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gsk.Params)
		}
	}

	return r0
}

// Router provides a mock function with given fields:
func (_m *Router) Router() *httprouter.Router {
	ret := _m.Called()

	var r0 *httprouter.Router
	if rf, ok := ret.Get(0).(func() *httprouter.Router); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httprouter.Router)
		}
	}

	return r0
}

// ServeFiles provides a mock function with given fields: _a0, _a1
func (_m *Router) ServeFiles(_a0 string, _a1 http.FileSystem) {
	_m.Called(_a0, _a1)
}

// ServeHTTP provides a mock function with given fields: _a0, _a1
func (_m *Router) ServeHTTP(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// NewRouter creates a new instance of Router. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Router {
	mock := &Router{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
